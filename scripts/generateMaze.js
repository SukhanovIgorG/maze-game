function getRandomFrom(array) {
  const index = Math.floor(Math.random() * array.length);
  return array[index];
}

function isEven(n) {
  return n % 2 === 0;
}

function painInConsole(map, cols, rows) {
  var s, d = '';
  for (var i = 0; i < cols; i++) {
    d = d + 'üü•';
  }
  console.log('üü•' + d + 'üü•');
  for (var i = 0; i < rows; i++) {
    s = '';
    for (var j = 0; j < cols; j++) {

      s += map[i][j];
    }
    console.log('üü•' + s + 'üü•');
  }
  console.log('üü•' + d + 'üü•');
  console.log('_________________ :>> ');
}


export function generateMaze(columnsNumber, rowsNumber, tractorsNumber) {
  const map = [];

  function setField(x, y, value) {
    if (x < 0 || x >= columnsNumber || y < 0 || y >= rowsNumber) {
      return null;
    };
    map[y][x] = value;
  }

  function getField(x, y) {
    if (x < 0 || x >= columnsNumber || y < 0 || y >= rowsNumber) {
      return null;
    }
    return map[y][x];
  }

  for (let y = 0; y < rowsNumber; y++) {
    const row = [];
    for (let x = 0; x < columnsNumber; x++) {
      row.push('üü•');
    };
    map.push(row);
  }

  // –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —á—ë—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–µ —Å –ª–∞–±–∏—Ä–∏–Ω—Ç–æ–º
  const startX = getRandomFrom(Array(columnsNumber).fill(0).map((_, index) => index).filter(x => isEven(x)));
  const startY = getRandomFrom(Array(rowsNumber).fill(0).map((_, index) => index).filter(x => isEven(x)));

  // —Ç—Ä–∞–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—á–∏—â–∞—Ç—å –¥–æ—Ä–æ–∂–∫–∏ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ
  var tractors = []
  for (let i = 0; i < tractorsNumber; i++) {
    // –ø–æ–∫–∞ –æ–Ω–∏ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ —Å —Ç—Ä–∞–∫—Ç–æ—Ä–∞–º–∏ –ø–∞—Ä—ã —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
    tractors.push({ x: startX, y: startY });
    setField(startX, startY, 'üü¶');
  }

  // —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≥–æ—Ç–æ–≤ –ª–∞–±–∏—Ä–∏–Ω—Ç –∏–ª–∏ –µ—â—ë –Ω–µ—Ç
  // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –ª–∞–±–∏—Ä–∏–Ω—Ç –≥–æ—Ç–æ–≤; false, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
  function isMaze() {
    // –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –æ—á–µ—Ä–µ–¥–∏ –≤—Å–µ —è—á–µ–π–∫–∏ –∫–∞—Ä—Ç—ã
    for (let x = 0; x < columnsNumber; x++) {
      for (let y = 0; y < rowsNumber; y++) {
        // –µ—Å–ª–∏ –Ω–∞ —á—ë—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –µ—â—ë –º–æ–∂–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å —Å—Ç–µ–Ω—É, 
        if (isEven(x) && isEven(y) && getField(x, y) === 'üü•') {
          return false
        }
      }
    }

    // painInConsole(map, columnsNumber, rowsNumber);
    return true;
  }

  while (!isMaze()) {
    moveTractor();
  }
  return map;

  function moveTractor() {
    // –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤ —Ü–∏–∫–ª–µ –≤—Å–µ —Ç—Ä–∞–∫—Ç–æ—Ä—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞
    for (const tractor of tractors) {
      const directs = [];
      if (tractor.x > 0) {
        directs.push('left');
      };
      if (tractor.x < columnsNumber - 2) {
        directs.push('right');
      };
      if (tractor.y > 0) {
        directs.push('up');
      };

      if (tractor.y < rowsNumber - 2) {
        directs.push('down');
      };

      const direct = getRandomFrom(directs);

      switch (direct) {
        case 'left':
          // –µ—Å–ª–∏ —á–µ—Ä–µ–∑ 2 —è—á–µ–π–∫–∏ —Å—Ç–µ–Ω–∞, —Ç–æ –æ—á–∏—â–∞–µ–º –æ–±–µ
          if (getField(tractor.x - 2, tractor.y) === 'üü•') {
            setField(tractor.x - 1, tractor.y, '‚¨ú');
            setField(tractor.x - 2, tractor.y, '‚¨ú');
          };
          // –º–µ–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É —Ç—Ä–∞–∫—Ç–æ—Ä–∞
          tractor.x -= 2;
          break;
        case 'right':
          if (getField(tractor.x + 2, tractor.y) === 'üü•') {
            setField(tractor.x + 1, tractor.y, '‚¨ú');
            setField(tractor.x + 2, tractor.y, '‚¨ú');
          };
          tractor.x += 2;
          break;
        case 'up':
          if (getField(tractor.x, tractor.y - 2) === 'üü•') {
            setField(tractor.x, tractor.y - 1, '‚¨ú');
            setField(tractor.x, tractor.y - 2, '‚¨ú');
          };
          tractor.y -= 2
          break;
        case 'down':
          if (getField(tractor.x, tractor.y + 2) === 'üü•') {
            setField(tractor.x, tractor.y + 1, '‚¨ú');
            setField(tractor.x, tractor.y + 2, '‚¨ú');
          };
          tractor.y += 2;
          break;
      }
    }
  }
};
